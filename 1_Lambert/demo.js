// Generated by CoffeeScript 1.11.1
(function() {
  var FS_CODE, VS_CODE, canvas, glw;

  VS_CODE = 'uniform mat4 u_worldMat;\nattribute vec3 a_modelPos;\nattribute vec3 a_modelNorm;\nvarying vec3 v_modelNorm;\nvoid main() {\n  gl_Position = u_worldMat * vec4(a_modelPos, 1.0);\n  v_modelNorm = a_modelNorm;\n}';

  FS_CODE = 'precision mediump float;\nuniform vec3 u_envLight;\nuniform vec3 u_paraDir;\nuniform vec3 u_paraDiff;\nuniform vec3 u_modelDiff;\nvarying vec3 v_modelNorm;\n\nvec3 lightDiffuse(\n  in vec3 lightDir,\n  in vec3 lightDiff,\n  in vec3 modelNorm,\n  in vec3 modelDiff\n) {\n  float dirDotNorm = dot(-lightDir, modelNorm);\n  dirDotNorm = clamp(dirDotNorm, 0.0, 1.0);\n  return dirDotNorm * modelDiff * lightDiff;\n}\n\nvoid main(){\n  vec3 diffCol = lightDiffuse(u_paraDir, u_paraDiff, v_modelNorm, u_modelDiff);\n  gl_FragColor = vec4(diffCol + u_envLight, 1.0);\n}';

  canvas = document.getElementById("gl-canvas");

  glw = createWebGLWrap(canvas);

  Promise.all([glw.createShader(VS_CODE, FS_CODE), glw.createBufferMesh_Obj("../_res/special.obj")]).then(function(resArray) {
    var envCol, mesh, modelMat, objDiff, paraDiff, paraDir, projMat, shader, worldMat;
    shader = resArray[0];
    mesh = resArray[1];
    projMat = mat4.ortho(mat4.create(), -512, 512, -288, 288, -500, 500);
    modelMat = mat4.create();
    mat4.translate(modelMat, modelMat, [0, 0, -100]);
    mat4.scale(modelMat, modelMat, [100, 100, 100]);
    worldMat = mat4.multiply(mat4.create(), projMat, modelMat);
    objDiff = vec3.fromValues(1, 1, 1);
    envCol = vec3.fromValues(0.6, 0.6, 0.6);
    paraDir = vec3.fromValues(Math.sqrt(2) / 2, -Math.sqrt(2) / 2, 0);
    paraDiff = vec3.fromValues(0.4, 0.4, 0.4);
    glw.clearFrame({
      clearColorRed: 0.92,
      clearColorGreen: 0.92,
      clearColorBlue: 0.92,
      clearColorAlpha: 1.0,
      clearDepth: 1.0
    });
    return glw.drawCall({
      shader: shader,
      uniformArray: [
        {
          name: "u_worldMat",
          data: worldMat
        }, {
          name: "u_modelDiff",
          data: objDiff
        }, {
          name: "u_envLight",
          data: envCol
        }, {
          name: "u_paraDir",
          data: paraDir
        }, {
          name: "u_paraDiff",
          data: paraDiff
        }
      ],
      attributeArray: [
        {
          name: "a_modelPos",
          size: 3,
          stride: 6,
          offset: 0,
          data: mesh
        }, {
          name: "a_modelNorm",
          size: 3,
          stride: 6,
          offset: 3,
          data: mesh
        }
      ],
      drawIndex: mesh,
      drawMode: glw.DrawMode.TRIANGLES,
      drawCount: mesh.getIndexLength()
    });
  })["catch"](function(err) {
    return console.log(err);
  });

}).call(this);
